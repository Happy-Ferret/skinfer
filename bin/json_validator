#!/usr/bin/env python
# coding=utf-8

import argparse
import json

from jsonschema import validate, Draft4Validator


def parse_args():
    desc = 'Validates a json file against a given json schema.'
    parser = argparse.ArgumentParser(description=desc)
    parser.add_argument('json_schema', type=str,
                        help='Path to the json schema file')
    parser.add_argument('json_file', type=str,
                        help='Path to the json file')
    return parser.parse_args()


def read_json(json_file):
    try:
        with open(json_file) as f:
            if json_file.endswith('.json'):
                return json.load(f)
            elif json_file.endswith('.jl'):
                return [json.loads(s) for s in f.readlines()]
    except Exception as e:
        print('Invalid json: %s' % e.message)


def read_schema(json_schema):
    with open(args.json_schema) as f:
        schema = json.load(f)

    try:
        Draft4Validator.check_schema(schema)
        return schema
    except Exception as e:
        print('Invalid schema: %s' % e.message)


def run(args):
    schema = read_schema(args.json_schema)
    json_data = read_json(args.json_file)

    if not schema or not json_data:
        return

    errors = 0
    for line, item in enumerate(json_data, 1):
        try:
            validate(item, schema)
        except Exception as e:
            errors += 1
            print('Error validating line %d: %s' % (line, e.message))

    print("%d items validated. %d errors." % (len(json_data), errors))


if __name__ == '__main__':
    args = parse_args()
    run(args)
